# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _find_nearest
else:
    import _find_nearest

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _find_nearest.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        return _find_nearest.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _find_nearest.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _find_nearest.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _find_nearest.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _find_nearest.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _find_nearest.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _find_nearest.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _find_nearest.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _find_nearest.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _find_nearest.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _find_nearest.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _find_nearest.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _find_nearest.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _find_nearest.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _find_nearest.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _find_nearest.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _find_nearest:
_find_nearest.SwigPyIterator_swigregister(SwigPyIterator)

class vector_int(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _find_nearest.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _find_nearest.vector_int___nonzero__(self)

    def __bool__(self) -> "bool":
        return _find_nearest.vector_int___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        return _find_nearest.vector_int___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        return _find_nearest.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _find_nearest.vector_int___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        return _find_nearest.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _find_nearest.vector_int___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        return _find_nearest.vector_int___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _find_nearest.vector_int___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        return _find_nearest.vector_int_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _find_nearest.vector_int_append(self, x)

    def empty(self) -> "bool":
        return _find_nearest.vector_int_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        return _find_nearest.vector_int_size(self)

    def swap(self, v: 'vector_int') -> "void":
        return _find_nearest.vector_int_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        return _find_nearest.vector_int_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        return _find_nearest.vector_int_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        return _find_nearest.vector_int_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        return _find_nearest.vector_int_rend(self)

    def clear(self) -> "void":
        return _find_nearest.vector_int_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        return _find_nearest.vector_int_get_allocator(self)

    def pop_back(self) -> "void":
        return _find_nearest.vector_int_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        return _find_nearest.vector_int_erase(self, *args)

    def __init__(self, *args):
        _find_nearest.vector_int_swiginit(self, _find_nearest.new_vector_int(*args))

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        return _find_nearest.vector_int_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        return _find_nearest.vector_int_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        return _find_nearest.vector_int_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        return _find_nearest.vector_int_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _find_nearest.vector_int_resize(self, *args)

    def insert(self, *args) -> "void":
        return _find_nearest.vector_int_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        return _find_nearest.vector_int_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        return _find_nearest.vector_int_capacity(self)
    __swig_destroy__ = _find_nearest.delete_vector_int

# Register vector_int in _find_nearest:
_find_nearest.vector_int_swigregister(vector_int)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _find_nearest.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _find_nearest.vector_double___nonzero__(self)

    def __bool__(self) -> "bool":
        return _find_nearest.vector_double___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        return _find_nearest.vector_double___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        return _find_nearest.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _find_nearest.vector_double___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        return _find_nearest.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _find_nearest.vector_double___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        return _find_nearest.vector_double___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _find_nearest.vector_double___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        return _find_nearest.vector_double_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _find_nearest.vector_double_append(self, x)

    def empty(self) -> "bool":
        return _find_nearest.vector_double_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        return _find_nearest.vector_double_size(self)

    def swap(self, v: 'vector_double') -> "void":
        return _find_nearest.vector_double_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        return _find_nearest.vector_double_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        return _find_nearest.vector_double_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        return _find_nearest.vector_double_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        return _find_nearest.vector_double_rend(self)

    def clear(self) -> "void":
        return _find_nearest.vector_double_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        return _find_nearest.vector_double_get_allocator(self)

    def pop_back(self) -> "void":
        return _find_nearest.vector_double_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        return _find_nearest.vector_double_erase(self, *args)

    def __init__(self, *args):
        _find_nearest.vector_double_swiginit(self, _find_nearest.new_vector_double(*args))

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        return _find_nearest.vector_double_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        return _find_nearest.vector_double_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        return _find_nearest.vector_double_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        return _find_nearest.vector_double_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _find_nearest.vector_double_resize(self, *args)

    def insert(self, *args) -> "void":
        return _find_nearest.vector_double_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        return _find_nearest.vector_double_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        return _find_nearest.vector_double_capacity(self)
    __swig_destroy__ = _find_nearest.delete_vector_double

# Register vector_double in _find_nearest:
_find_nearest.vector_double_swigregister(vector_double)


def find(arg1: 'vector_int', arg2: 'vector_int', arg3: 'vector_int', arg4: 'vector_int', arg5: 'vector_int', arg6: 'vector_int', arg7: 'bool') -> "std::vector< int,std::allocator< int > >":
    return _find_nearest.find(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def yell() -> "void":
    return _find_nearest.yell()


